<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>jQuery用户快速上手Kissy</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;1. 引入库文件&lt;/h3&gt;

&lt;p&gt;jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kissy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;http://g.tbcdn.cn/kissy/k/1.4.3/seed.js&quot; data-config=&quot;{combine:true}&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kissy跟jQuery一样，可以将其下载到本地进行使用，但更推荐使用淘宝的CDN。除能够减小服务器带宽压力，利用CDN加快js文件的载入速度外，还能直接使用combo，减少请求数，免去了让自己服务器支持combo功能的麻烦。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2. 开始使用&lt;/h3&gt;

&lt;p&gt;jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function () {
    /* jQuery代码 */
});
// 或者
$(function () {
    /* jQuery代码 */ 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kissy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KISSY.use([&#39;node&#39;], function (S) {
S.ready(function (S) {
    var $ = S.all;
    /** jQuery风格代码 */
});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;在Dom操作上面基本上可以当成jQuery来进行使用，但还存在些许不同，之后有时间会单独整理一篇文章列出其中的不同点，当然也可以先参考&lt;a href=&quot;http://cyj.me/jquery-kissy-rosetta/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果想要使用ajax功能的话，可以写成下面的形式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KISSY.use([&#39;node&#39;, &#39;io&#39;], function (S) {
S.ready(function (S) {
    var $ = S.all,
        io = S.io,
        $.get = io.get,
        $.post = io.post;
    /** jQuery风格代码 */
});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后说一点，本文只是用一种抖机灵的方式让使用jQuery的人能像用jQuery一样来使用Kissy，还是强烈建议去查看下Kissy的&lt;a href=&quot;http://docs.kissyui.com/1.4/docs/html/guideline/kmd.html&quot;&gt;模块化规范&lt;/a&gt;。毕竟，模块化才是Kissy相比于jQuery真正所具有的优势，至少在我看来是这样的。使用Kissy，你可以很方便地创建和管理自己的模块，得到类似使用requireJs管理模块依赖库所带来的好处，让开发过程变得更加简单高效，代码的可维护性更高。&lt;/p&gt;
</description>
        <pubDate>Fri, 30 May 2014 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/basic-tutorial/2014/05/30/tutorial-for-jquery-user/</link>
        <guid isPermaLink="true">http://localhost:4000/basic-tutorial/2014/05/30/tutorial-for-jquery-user/</guid>
      </item>
    
      <item>
        <title>初窥Kissy源码结构</title>
        <description>&lt;p&gt;之前花了点时间大概看了下Kissy的官网部分文档，大致上也了解了Kissy的基本使用方法。当然，学东西的时候光看不练是很难真正将其掌握的。因此，也就有了这个放置在GitHub上的&lt;a href=&quot;https://github.com/surunzi/KissyLearning&quot;&gt;KissyLearning&lt;/a&gt;项目。考虑到网络上Kissy教程文档的缺乏，这里除了会发学习笔记外，可能还会发点傻瓜级教程什么的~_~&lt;/p&gt;

&lt;p&gt;点击&lt;a href=&quot;https://github.com/kissyteam/kissy&quot;&gt;此处&lt;/a&gt;查看Kissy项目的GitHub主页，其中src目录存放的就是Kissy的源码。从Build目录下可以打开seed.js（种子文件），可以看到包含了loader，features，ua三个基本模块。其中，loader（模块加载器）是Kissy的最开始部分。首先打开src/loader/目录下的build.xml文件，由最底部的代码得知，loader文件的合并顺序。&lt;/p&gt;

&lt;p&gt;Kissy/src/loader/build.xml：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;target name=&quot;concat&quot;&amp;gt;
    &amp;lt;concat destfile=&quot;${component.src.dir.tmp}/loader-pkg-debug.js&quot;
            encoding=&quot;${charset}&quot; outputencoding=&quot;${charset}&quot;&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/kissy.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/utils.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/data-structure.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/css-onload.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/get-script.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/configs.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/combo-loader.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/loader.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/i18n.js&quot;/&amp;gt;
        &amp;lt;path location=&quot;${component.src.dir}/init.js&quot;/&amp;gt;
    &amp;lt;/concat&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先来看kissy.js文件，把大部分代码删除掉，可以看到其基本结构下面这样子的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var KISSY = (function (undefined) {
    var S;
    S = {
        /** Some code here. */
    };
    return S;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该文件定义一个KISSY的变量，作为整个库文件的最外层文件（命名空间），以免污染全局。其值是某自执行函数的返回值，即函数中所定义的S。该文件主要定义了全局命名空间，并定义了一小部分属性，诸如版本号，配置，日志等。&lt;/p&gt;

&lt;p&gt;接下来执行的是utils.js，data-structure.js…loader.js等文件，其基本结构大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function (S) {
    /** Some code here. */
})(KISSY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用自执行函数，将KISSY对象传入函数中，并将操作后需要保留的值或方法赋给S，即KISSY对象。&lt;/p&gt;

&lt;p&gt;在基本的加载器初始完成之后，便可以使用模块加载器来进行模块的添加和管理了，之后代码的基本结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KISSY.add(function (S, require, exports, module) {
    /** Some code here. */
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于Kissy的模块定义规范可戳&lt;a href=&quot;http://docs.kissyui.com/1.4/docs/html/guideline/kmd.html&quot;&gt;此处&lt;/a&gt;查看。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;晚上大概扫了一下源码，就只了解了这么多，之后有空再细看。复习，不对。。是预习嵌入式去，祝自己下周考个好成绩。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;说笑的，求不挂就行(T＿T)&lt;/p&gt;
</description>
        <pubDate>Thu, 29 May 2014 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/learning-notes/2014/05/29/kissy-source-first-impression/</link>
        <guid isPermaLink="true">http://localhost:4000/learning-notes/2014/05/29/kissy-source-first-impression/</guid>
      </item>
    
  </channel>
</rss>
